<!-- _post.html.erb -->
<style>
  .options-list {
    list-style-type: none;
    padding: 0;
  }

  .options-list .option {
    display: flex;
    align-items: center;
    cursor: pointer;
  }

  .custom-bullet::before {
    content: "\2022"; /* Bullet circle character */
    color: #3490dc; /* Bullet circle color, you can change it */
    margin-right: 8px; /* Adjust the spacing between the bullet and the text */
  }
</style>

<div class="px-6 py-3 border-b" id="<%= dom_id(post) %>">
  <div class="flex space-x-3 items-start">
    <div class="flex-shrink-0">
      <%= profile_image(post.user) %>
    </div>
    <div class="flex-1">
      <p class="font-bold"><%= link_to post.user.name, profile_path(post.user), class: "hover:underline", data: { turbo: false } %> - <%= post.post_category.join(', ').upcase %> </p>
      <p class="font-bold"> In communities - <%= post.topics.map { |topic| topic.full_path_name }.join(', ') %> </p>  
      <%= link_to post, data: { turbo: false } do %>
        <div class="prose prose-lg"><%= simple_format(post.body) %></div>
      <% end %>

      <% if post.q1.present? %>
        <br>
        <div class="question">
          <strong>Poll 1: <%= post.q1 %></strong>
          <%= link_to 'View', see_votes_post_path(post, question_id: 1), class: "view-votes-link", remote: true, data: { question_id: 1, turbo: false  } %>
          <% existing_vote = Vote.find_by(user: current_user, post: post, question_id: 1) %>
          <ul class="options-list" data-question-id="<%= post.id %>" data-option-type="q1">
            <% post.q1_args.split(',').each_with_index do |option, index| %>
              <% if existing_vote.nil? %>
                <li class="option clickable" data-option="<%= index %>">&#x25CF;  <%= option.strip %><span class="option-percentage"></span></li>
              <% else %>
                <% current_percentages = post.q1_percentages.split(',').map(&:to_i) %>
                <% normalized_percentages = current_percentages.map { |percentage| (percentage.to_f / current_percentages.sum * 100).round(2) } %>
                <li>&#x25CF; <%= option.strip %>
                  <span>(<%= normalized_percentages[index] %> %)</span>
                </li>
              <% end %>
            <% end %>
          </ul>
        </div>
      <% end %>

      <% if post.q2.present? %>
        <br>
        <div class="question">
          <strong>Poll 2: <%= post.q2 %> </strong>
          <%= link_to 'View', see_votes_post_path(post, question_id: 2), class: "view-votes-link", remote: true, data: { question_id: 2, turbo: false  } %>
          <% existing_vote = Vote.find_by(user: current_user, post: post, question_id: 2) %>
          <ul class="options-list" data-question-id="<%= post.id %>" data-option-type="q2">
            <% post.q2_args.split(',').each_with_index do |option, index| %>
            <% if existing_vote.nil? %>
              <li class="option clickable" data-option="<%= index %>">&#x25CF;  <%= option.strip %><span class="option-percentage"></span></li>
            <% else %>
              <% current_percentages = post.q2_percentages.split(',').map(&:to_i) %>
                <% normalized_percentages = current_percentages.map { |percentage| (percentage.to_f / current_percentages.sum * 100).round(2) } %>
                <li>&#x25CF; <%= option.strip %>
                  <span>(<%= normalized_percentages[index] %> %)</span>
                </li>
            <% end %>
            <% end %>
          </ul>
        </div>
      <% end %>

      <% if post.image_link.present? %>
        <br>
        <img src="<%= embed_google_drive_image(post.image_link) %>" alt="Post Image">
      <% end %>

      <% if post.video_link.present? %>
        <br>
        <div class="video-container">
          <% video_id = post.video_link.split('/').last %>
          <iframe width="560" height="315" src="https://www.youtube.com/embed/<%= video_id %>" frameborder="0" allowfullscreen allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe>
        </div>
      <% end %>
      
      <br>
      <%= render "posts/controls", post: post %>

      <br>
      <% if post.user_id == current_user.id || current_user.admin %>
        <%= link_to "Edit", edit_post_path(id: post.id), class: "text-blue-500 hover:underline", data: { turbo: false} %>
      <% end %>

    </div>
  </div>
</div>

<script>
// Inside your existing JavaScript
document.addEventListener("turbo:load", function () {
  console.log("Turbolinks load event triggered");

  let voteSubmitted1 = false;     //to ensure only one click per page reload
  let voteSubmitted2 = false;   
  const optionLists = document.querySelectorAll('.options-list');

  optionLists.forEach(list => {
    list.addEventListener('click', function (event) {
      if (event.target.classList.contains('option')) {
        const questionId = list.getAttribute('data-question-id');
        const optionType = list.getAttribute('data-option-type');
        const selectedOption = event.target.getAttribute('data-option');

        console.log(`Question ID: ${questionId}`);
        console.log(`Option Type: ${optionType}`);
        console.log(`Selected Option: ${selectedOption}`);

        if ((optionType === 'q1' && !voteSubmitted1) || (optionType === 'q2' && !voteSubmitted2)) {
        // Send an AJAX request to the server to update the percentages
        fetch(`/posts/${questionId}/update_options`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            option_type: optionType,
            option_id: selectedOption,
            question_id: questionId,
          }),
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Update the displayed percentages
            console.log(data.percentages)
            updateOptionPercentages(list, data.percentages);
            console.log('Percentages updated successfully');
            if (optionType === 'q1') {
            voteSubmitted1 = true; }
            if (optionType === 'q2') {
            voteSubmitted2 = true; }
          } else {
            console.error('Failed to update percentages:', data.errors);
          }
        });
      }}
    });
  });
  function updateOptionPercentages(list, percentages) {
    const options = list.querySelectorAll('.option');
    
    options.forEach((option, index) => {
      const percentage = percentages[index];
      const percentageSpan = option.querySelector('.option-percentage');
      if (percentageSpan) {
        percentageSpan.textContent = ` (${percentage}%)`;
      }
    });
  }
  
});
</script>